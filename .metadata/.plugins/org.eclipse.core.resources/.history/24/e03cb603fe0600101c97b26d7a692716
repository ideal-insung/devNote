package algorithm;

import java.util.LinkedList;

import data_structure.LinkedListGraph;
import data_structure.LinkedListQueue;

public class BFS {
	
	boolean visited [];
	LinkedList<Integer> []array;
	
	public BFS(LinkedListGraph graph, int size) {
		this.array  = graph.array;
		this.visited = new boolean[size];
	}
	
	public void bfs(int start) {
		LinkedListQueue que= new LinkedListQueue();
		boolean[] isVisited = new boolean[array.length];
		
		que.enQueue(start);
		isVisited[start] = true;
		
		while(!que.isEmpty()) {
			int idx = (int)que.deQueue();
			for(int a:array[idx]) {
				if(!isVisited[a]) {
					que.enQueue(a);
					isVisited[a]= true;
				}
			}
			showArray(idx);
		}
	}
}
