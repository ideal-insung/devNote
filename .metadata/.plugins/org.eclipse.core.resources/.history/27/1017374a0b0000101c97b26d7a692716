package data_structure;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class binarySearchTree {

	private static Node root; //rootNode
	
	public static void show() {
		System.out.println("오름순회:");
		leftInorder(root);
		System.out.println();
	}
	
	public static void leftInorder(Node node) {
		if(node == null) return;
		leftInorder(node.getLeft());
		System.out.println(node.getVal());
		leftInorder(node.getRight());
	}
	
	public static Node search(Node root, int number) {
		if(root == null) return null;
		if(number == root.getVal()) { //찾고자 하는 값이 root에 있다면,
			return root;
		}else if(number < root.getVal()) { //루트의 값이 더크다면
			return search(root.getLeft(), number);
		}else if(number > root.getVal()) { //루트의 값이 더 작다면
			return search(root.getRight(), number);
		}
		return root;
	}
	
	public static void add(binarySearchTree bst , Scanner sc) {
		System.out.println("값을 몇번 넣으시겠습니까?");
		int cnt = sc.nextInt();
		System.out.println(cnt+"번 넣을게요!");
		sc.nextLine();
		for(int i=0; i<=cnt-1;i++) {
			Scanner sc2 = new Scanner(System.in);
			bst.addNode(sc2.nextInt());
			sc.nextLine();
		}
		System.out.println("add complete!");
	}
	
	public Node delete(Node root, int number) {
		if(root == null) return null;
		if(number <root.getVal()) {
			if(root.getLeft() == null) System.out.println(number+"값이 없습니다!");
			else root.setLeft(delete(root.getLeft(), number));
		}else if(number > root.getVal()) {
			if(root.getRight() == null) System.out.println(number+"값이 없습니다!");
			else root.setRight(delete(root.getRight(), number));
		}else {
			if(root.getLeft() == null && root.getRight() == null) return null;
			else if(root.getLeft() == null) return root.getRight();
			else if(root.getRight() == null) return root.getLeft();
			
			root.setVal(findMax(root.getRight()).getVal());
			root.setRight(delete(root.getRight(), root.getVal()));
		}
		return root;
	}
	
	public static Node findMax(Node root) {
		if(root == null) return null;
		if(root.getRight() != null) {
			return findMax(root.getRight());
		}
		return root;
	}
	
	public static Node findMini(Node root) {
		if(root == null) return null;
		if(root.getLeft() != null) {
			return findMax(root.getLeft());
		}
		return root;
	}
	
	public void addNode(int val) {
		Node newNode = new Node(val);
		if(root == null) { //root가 null이면  객체생성
			root = newNode;
			return;
		}
		
		Node currntNode = root;
		Node parentNode = null;
		
		while(true) {
			parentNode = currntNode ;
			if( val > parentNode.getVal()) { // val값이 현재 parentNode보다 크다면, 왼쪽으로 가지를 뻗어나가야 한다
				parentNode = parentNode.getLeft();
				if(currntNode == null) {//null == >  마지막요소
					parentNode.setLeft(newNode); //부모의 left에 셋팅
					return;
				}else if(currntNode.getVal() == newNode.getVal()) { //값이 같다면 리턴
					return;
				}
			}else if(val <= parentNode.getVal()) { // val값이 현재 parentNode보다 크다면, 오른쪽으로 가지를 뻗어나가야 한다
				parentNode = parentNode.getRight();
				if(currntNode == null) { //null == >  마지막요소
					parentNode.setRight(newNode); //부모의 right에 셋팅
					return;
				}else if(currntNode.getVal() == newNode.getVal()) {//값이 같다면 리턴
					return;
				}
			}
		}
	}
	
	public static void showList() {
		System.out.println("binarySearchTree console");
		System.out.println("add");
		System.out.println("delete");
		System.out.println("search");
		System.out.println("max");
		System.out.println("min");
		System.out.println("show");
		System.out.println("exit");
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		showList();
		binarySearchTree bst = new binarySearchTree();
		while(true) {
			String command = sc.next().trim();
			if(command.equals("add")) {
				add(bst, sc);
				//showList();
			}else if(command.equals("delete")) {
				System.out.println("삭제할 정수를 입력하세요.");
				int num = sc.nextInt();
				System.out.println("삭제할 정수 :" + num);
				bst.delete(root, num);
			}else if(command.equals("search")) {
				System.out.println("검색할 정수를 입력하세요.");
				int num = sc.nextInt();
				System.out.println("검색할 정수 :" + num);
				Node findNode = search(root, num);
				if(findNode == null) System.out.println("검색한 값이 존재하지 않습니다.");
				else System.out.println("검색한 값이 존재합니다!" + findNode.getVal());
			}else if(command.equals("max")) {
				Node maxNode = findMax(root);
				System.out.println("가장 큰 값은 " + maxNode.getVal() + "입니다!");
			}else if(command.equals("min")) {
				Node minNode = findMini(root);
				System.out.println("가장 작은 값은 " + minNode.getVal() + "입니다!");
			}else if(command.equals("show")) {
				bst.show();
				showList();
				sc.nextLine();
			}else if(command.equals("exit")) {
				return;
			}else {
				System.out.println("잘못 입력하셨습니다.");
			}
		}
	}
}
