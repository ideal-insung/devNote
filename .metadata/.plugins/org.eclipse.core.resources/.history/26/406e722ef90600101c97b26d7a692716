package algorithm;

import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

import data_structure.LinkedListGraph;
import data_structure.LinkedListStack;
import data_structure.linkList.MyNode;

public class DFS { //Depth first search

	
	/*public void dfs_stack(LinkedListGraph graph,int start) {
		int visited [] = new int[graph.vertexCnt];
		LinkedListStack stack = new LinkedListStack();
		MyNode curNode;
		stack.push(start);
		visited[start] = 1;
		while(!stack.isEmty()) {
			int popData = (int) stack.pop();
			System.out.println("popData == > " + popData );
			curNode = graph.array[start].head;
			while(curNode.next != null) {
				if(visited[(int)curNode.data] == 0) {
					stack.push((int)curNode.data);
					visited[(int)curNode.data]= 1;
				}
				curNode = curNode.next;
			}
		}
		
	}*/
	
	public void dfs_stack(LinkedListGraph lls,int start) {
		LinkedList<Integer>[] array = lls.array;
		Stack<Integer> stack = new Stack<Integer>();
		boolean visited [] = new boolean[array.length];
		stack.push(start);
		visited[start] =true;
		while(!stack.empty()) {
			int popData = stack.pop();
			for(int a : array[popData]) {
				if(!visited[a]) {
					visited[a] = true;
					stack.push(a);
				}
			}
			showArray(popData);
		}
	}
	
	public void showArray(int data) {
		System.out.print("방문순서: "+data);
	}
	
	
}
